"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import { loginUser, registerUser } from "@/lib/api/auth";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { useToast } from "@/hooks/use-toast";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from "@/components/ui/dialog";
import { Separator } from "@/components/ui/separator";
import { Mail, Loader2, LogIn, Lock, UserPlus } from "lucide-react";
import axios from "axios";
import { useRole } from "@/hooks/use-role";

const API_URL = process.env.NEXT_PUBLIC_API_URL || "http://localhost:1337/api";

export default function AuthPage() {
  const [mode, setMode] = useState<"login" | "register">("login");
  const [username, setUsername] = useState("");
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [role, setRole] = useState<"client" | "owner" | "expert">("client");
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [resetOpen, setResetOpen] = useState(false);
  const [resetEmail, setResetEmail] = useState("");
  const [resetLoading, setResetLoading] = useState(false);
  const [resetSuccess, setResetSuccess] = useState<string | null>(null);
  const [resetError, setResetError] = useState<string | null>(null);
  const { toast } = useToast();
  const router = useRouter();
  const { processLoginResponse } = useRole();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError(null);
    try {
      if (mode === "register") {
        // Register user without role (Strapi doesn't accept role parameter)
        const data = await registerUser({ username, email, password, role });
        toast({ title: "Registered!", description: `Welcome, ${data.user.username}` });
        
        // Store the intended role in localStorage for now
        localStorage.setItem("intended_role", role);
        
        // Process the registration response using the role context
        processLoginResponse(data);
      } else {
        const data = await loginUser({ identifier: email, password });
        toast({ title: "Logged in!", description: `Welcome back, ${data.user.username}` });
        
        // Process the login response using the role context
        processLoginResponse(data);
      }
    } catch (err: any) {
      setError(err?.response?.data?.error?.message || err?.message || "Authentication failed");
      toast({ title: "Auth failed", description: err?.response?.data?.error?.message || err?.message, variant: "destructive" });
    } finally {
      setLoading(false);
    }
  };

  const handleGoogleLogin = () => {
    window.location.href = "/api/google/auth";
  };

  const handleResetPassword = async (e: React.FormEvent) => {
    e.preventDefault();
    setResetLoading(true);
    setResetError(null);
    setResetSuccess(null);
    try {
      await axios.post("/api/strapi-proxy/auth/forgot-password", { email: resetEmail });
      setResetSuccess("If this email is registered, a password reset link has been sent.");
    } catch (err: any) {
      setResetError(err?.response?.data?.error?.message || err?.message || "Failed to send reset email");
    } finally {
      setResetLoading(false);
    }
  };

  return (
    <div className="flex min-h-screen items-center justify-center bg-muted">
      <Card className="w-full max-w-md shadow-lg">
        <CardHeader>
          <CardTitle className="text-center text-2xl font-bold">Squeedr Login / Register</CardTitle>
        </CardHeader>
        <CardContent>
          <Tabs value={mode} onValueChange={v => setMode(v as "login" | "register")}> 
            <TabsList className="w-full mb-6">
              <TabsTrigger value="login" className="w-1/2">Login</TabsTrigger>
              <TabsTrigger value="register" className="w-1/2">Register</TabsTrigger>
            </TabsList>
            <TabsContent value="login">
              <form onSubmit={handleSubmit} className="space-y-4">
                <div>
                  <Label htmlFor="email">Email</Label>
                  <Input id="email" type="email" value={email} onChange={e => setEmail(e.target.value)} required autoFocus />
                </div>
                <div>
                  <Label htmlFor="password">Password</Label>
                  <Input id="password" type="password" value={password} onChange={e => setPassword(e.target.value)} required />
                </div>
                <div className="flex justify-between items-center">
                  <Button type="button" variant="link" className="px-0 text-xs" onClick={() => setResetOpen(true)}>
                    Forgot password?
                  </Button>
                </div>
                {error && <div className="text-red-600 text-sm">{error}</div>}
                <Button type="submit" className="w-full" disabled={loading}>
                  {loading ? <Loader2 className="animate-spin h-4 w-4 mr-2 inline" /> : <LogIn className="h-4 w-4 mr-2 inline" />}Login
                </Button>
                <div className="flex items-center my-4">
                  <Separator className="flex-1" />
                  <span className="mx-2 text-xs text-muted-foreground">or</span>
                  <Separator className="flex-1" />
                </div>
                <Button type="button" variant="outline" className="w-full flex items-center gap-2" onClick={handleGoogleLogin}>
                  <span className="bg-white rounded-full border p-1 mr-2 flex items-center justify-center" style={{ width: 20, height: 20 }}>
                    <svg width="18" height="18" viewBox="0 0 48 48"><g><path fill="#4285F4" d="M44.5 20H24v8.5h11.7C34.7 33.1 29.8 36 24 36c-6.6 0-12-5.4-12-12s5.4-12 12-12c2.7 0 5.2.9 7.2 2.5l6.4-6.4C34.1 6.5 29.3 4.5 24 4.5 12.7 4.5 3.5 13.7 3.5 25S12.7 45.5 24 45.5c10.5 0 19.5-8.5 19.5-19.5 0-1.3-.1-2.5-.3-3.5z"/><path fill="#34A853" d="M6.3 14.7l7 5.1C15.5 16.1 19.4 13.5 24 13.5c2.7 0 5.2.9 7.2 2.5l6.4-6.4C34.1 6.5 29.3 4.5 24 4.5c-6.6 0-12 5.4-12 12 0 1.5.3 2.9.8 4.2z"/><path fill="#FBBC05" d="M24 45.5c5.8 0 10.7-2.1 14.3-5.7l-6.6-5.4c-2 1.4-4.5 2.2-7.7 2.2-5.7 0-10.5-3.9-12.2-9.1l-7 5.4C7.7 41.1 15.2 45.5 24 45.5z"/><path fill="#EA4335" d="M44.5 20H24v8.5h11.7c-1.1 3.1-4.1 5.5-7.7 5.5-2.2 0-4.2-.7-5.7-2l-7 5.4C18.5 42.1 21.1 43.5 24 43.5c5.8 0 10.7-2.1 14.3-5.7l-6.6-5.4c-2 1.4-4.5 2.2-7.7 2.2-5.7 0-10.5-3.9-12.2-9.1l-7 5.4C7.7 41.1 15.2 45.5 24 45.5z"/></g></svg>
                  </span>
                  Login with Google
                </Button>
              </form>
            </TabsContent>
            <TabsContent value="register">
              <form onSubmit={handleSubmit} className="space-y-4">
                <div>
                  <Label htmlFor="username">Username</Label>
                  <Input id="username" value={username} onChange={e => setUsername(e.target.value)} required autoFocus />
                </div>
                <div>
                  <Label htmlFor="email">Email</Label>
                  <Input id="email" type="email" value={email} onChange={e => setEmail(e.target.value)} required />
                </div>
                <div>
                  <Label htmlFor="password">Password</Label>
                  <Input id="password" type="password" value={password} onChange={e => setPassword(e.target.value)} required />
                </div>
                <div>
                  <Label htmlFor="role">Role</Label>
                  <select
                    id="role"
                    value={role}
                    onChange={e => setRole(e.target.value as "client" | "owner" | "expert")}
                    className="w-full border rounded-md px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-ring"
                  >
                    <option value="client">Client</option>
                    <option value="expert">Expert</option>
                </div>
                {error && <div className="text-red-600 text-sm">{error}</div>}
                <Button type="submit" className="w-full" disabled={loading}>
                  {loading ? <Loader2 className="animate-spin h-4 w-4 mr-2 inline" /> : <UserPlus className="h-4 w-4 mr-2 inline" />}Register
                </Button>
                <div className="flex items-center my-4">
                  <Separator className="flex-1" />
                  <span className="mx-2 text-xs text-muted-foreground">or</span>
                  <Separator className="flex-1" />
                </div>
                <Button type="button" variant="outline" className="w-full flex items-center gap-2" onClick={handleGoogleLogin}>
                  <span className="bg-white rounded-full border p-1 mr-2 flex items-center justify-center" style={{ width: 20, height: 20 }}>
                    <svg width="18" height="18" viewBox="0 0 48 48"><g><path fill="#4285F4" d="M44.5 20H24v8.5h11.7C34.7 33.1 29.8 36 24 36c-6.6 0-12-5.4-12-12s5.4-12 12-12c2.7 0 5.2.9 7.2 2.5l6.4-6.4C34.1 6.5 29.3 4.5 24 4.5 12.7 4.5 3.5 13.7 3.5 25S12.7 45.5 24 45.5c10.5 0 19.5-8.5 19.5-19.5 0-1.3-.1-2.5-.3-3.5z"/><path fill="#34A853" d="M6.3 14.7l7 5.1C15.5 16.1 19.4 13.5 24 13.5c2.7 0 5.2.9 7.2 2.5l6.4-6.4C34.1 6.5 29.3 4.5 24 4.5c-6.6 0-12 5.4-12 12 0 1.5.3 2.9.8 4.2z"/><path fill="#FBBC05" d="M24 45.5c5.8 0 10.7-2.1 14.3-5.7l-6.6-5.4c-2 1.4-4.5 2.2-7.7 2.2-5.7 0-10.5-3.9-12.2-9.1l-7 5.4C7.7 41.1 15.2 45.5 24 45.5z"/><path fill="#EA4335" d="M44.5 20H24v8.5h11.7c-1.1 3.1-4.1 5.5-7.7 5.5-2.2 0-4.2-.7-5.7-2l-7 5.4C18.5 42.1 21.1 43.5 24 43.5c5.8 0 10.7-2.1 14.3-5.7l-6.6-5.4c-2 1.4-4.5 2.2-7.7 2.2-5.7 0-10.5-3.9-12.2-9.1l-7 5.4C7.7 41.1 15.2 45.5 24 45.5z"/></g></svg>
                  </span>
                  Register with Google
                </Button>
              </form>
            </TabsContent>
          </Tabs>
        </CardContent>
      </Card>
      {/* Password Reset Dialog */}
      <Dialog open={resetOpen} onOpenChange={setResetOpen}>
        <DialogContent className="sm:max-w-[400px]">
          <DialogHeader>
            <DialogTitle>Reset Password</DialogTitle>
          </DialogHeader>
          <form onSubmit={handleResetPassword} className="space-y-4">
            <div>
              <Label htmlFor="reset-email">Email</Label>
              <Input id="reset-email" type="email" value={resetEmail} onChange={e => setResetEmail(e.target.value)} required autoFocus />
            </div>
            {resetError && <div className="text-red-600 text-sm">{resetError}</div>}
            {resetSuccess && <div className="text-green-600 text-sm">{resetSuccess}</div>}
            <DialogFooter>
              <Button type="button" variant="outline" onClick={() => setResetOpen(false)}>
                Cancel
              </Button>
              <Button type="submit" disabled={resetLoading}>
                {resetLoading ? <Loader2 className="animate-spin h-4 w-4 mr-2 inline" /> : <Lock className="h-4 w-4 mr-2 inline" />}Send Reset Link
              </Button>
            </DialogFooter>
          </form>
        </DialogContent>
      </Dialog>
    </div>
  );
}
